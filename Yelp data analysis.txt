Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment.
1) In the first part, I'm asked a series of questions that will help profile and understand the data just like a data scientist would. 
2 ) In the second part of the assignment, I'm asked to come up with my inferences and analysis of the data for a particular research.




Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000 
	-select count(*)
	 from Attribute ;

ii. Business table = 10000 
	-select count(*)
	 from Business ;

iii. Category table = 10000 
	-select count(*)
	 from Category ;

iv. Checkin table = 10000 
	-select count(*)
	 from Checkin ;

v. elite_years table = 10000 
	-select count(*)
	 from elite_years ;

vi. friend table = 10000 
	-select count(*)
	 from friend ;

vii. hours table = 10000
	-select count(*)
	 from hours ;

viii. photo table = 10000
	-select count(*)
	 from photo ;

ix. review table = 10000
	-select count(*)
	 from review ;

x. tip table = 10000
	-select count(*)
	 from tip ;

xi. user table =10000
	-select count(*)
	 from user ;	

_________________________________________________________________________________________________________________

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business(id) = 10000 
	-select count(distinct (id) )
	 from Business ;


ii. Hours(business_id) = 1562 
	-select count(distinct (business_id) )
	 from hours ;


iii. Category(business_id) = 2643 
	-select count(distinct (business_id))
	 from Category ;


iv. Attribute(business_id) = 1115 
	-select count(distinct (business_id) )
	 from Attribute ;


v. Review(id) = 10000  , Review(business_id) = 8090 , Review(user_id) = 9581 
	-select count(distinct (id) )
	 from Review ;

	-select count(distinct (business_id) )
	 from Review ;

	-select count(distinct (user_id) )
	 from Review ;


vi. Checkin(business_id)= 493 
	-select count(distinct (business_id) )
	 from Checkin ;


vii. Photo(id) = 10000 , Photo(business_id) = 6493 
	-select count(distinct (id) )
	 from Photo ;

	-select count(distinct (business_id) )
	 from Photo ;


viii. Tip(business_id) = 3979  , Tip(user_id) = 537 
	-select count(distinct (business_id) )
	 from Tip ;

	-select count(distinct (user_id) )
	 from Tip ;	


ix. User(id) = 10000 
	-select count(distinct (id) )
	 from User ;


x. Friend(friend_id) = 9415  , Friend(user_id) = 11
	-select count(distinct (friend_id) )
	 from Friend ;

	-select count(distinct (user_id) )
	 from Friend ;


xi. Elite_years(user_id) = 2780 
	-select count(distinct (user_id) )
	 from Elite_years ;



_________________________________________________________________________________________________________________	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: there are no rows with NULL value.
		
       - select * 
 	from user
	where id = null 
	or name =null 
	or review_count = null 
	or yelping_since = null 
	or useful = null 
	or funny = null 
	or cool = null 
	or fans = null 
	or average_stars = null 
	or compliment_hot = null 
	or compliment_more = null 
	or compliment_profile = null 
	or compliment_cute = null 
	or compliment_list = null 
	or compliment_note = null
	or compliment_plain = null
	or compliment_cool = null
	or compliment_funny = null 
	or compliment_writer = null
	or compliment_photos = null;
+----+------+--------------+---------------+--------+-------+------+------+---------------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+
| id | name | review_count | yelping_since | useful | funny | cool | fans | average_stars | compliment_hot | compliment_more | compliment_profile | compliment_cute | compliment_list | compliment_note | compliment_plain | compliment_cool | compliment_funny | compliment_writer | compliment_photos |
+----+------+--------------+---------------+--------+-------+------+------+---------------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+
+----+------+--------------+---------------+--------+-------+------+------+---------------+----------------+-----------------+--------------------+-----------------+-----------------+-----------------+------------------+-----------------+------------------+-------------------+-------------------+
(Zero rows)

________________________________________________________________________________________________________________________	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars	
		min: 1		max: 5		avg: 3.7082 
             - select min(Stars) , max(Stars) , avg(Stars)
	      from Review ;
        
	
	ii. Table: Business, Column: Stars
		min: 1.0	max: 5.0	avg: 3.6549  
             - select min(Stars) , max(Stars) , avg(Stars)
	      from Business ;		

	
	iii. Table: Tip, Column: Likes
		min: 0		max: 2		avg: 0.0144 
             - select min(Likes) , max(Likes) , avg(Likes)
	      from Tip;
	

	iv. Table: Checkin, Column: Count
		min: 1		max: 53		avg: 1.9414 
             - select min(Count) , max(Count) , avg(Count)
	      from Checkin;		
	
	v. Table: User, Column: Review_count	
		min: 0		max: 2000	 avg: 24.2995 
             - select min(Review_count) , max(Review_count) , avg(Review_count)
	      from User ;


________________________________________________________________________________________________________________________


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	- select city , count(review_count)  as Total_reviews   
	  from Business 
   	  group by city 
	  order by Total_reviews  desc

+-----------------+---------------+
| city            | Total_reviews |
+-----------------+---------------+
| Las Vegas       |          1561 |
| Phoenix         |          1001 |
| Toronto         |           985 |
| Scottsdale      |           497 |
| Charlotte       |           468 |
| Pittsburgh      |           353 |
| Montréal        |           337 |
| Mesa            |           304 |
| Henderson       |           274 |
| Tempe           |           261 |
| Edinburgh       |           239 |
| Chandler        |           232 |
| Cleveland       |           189 |
| Gilbert         |           188 |
| Glendale        |           188 |
| Madison         |           176 |
| Mississauga     |           150 |
| Stuttgart       |           141 |
| Peoria          |           105 |
| Markham         |            80 |
| Champaign       |            71 |
| North Las Vegas |            70 |
| North York      |            64 |
| Surprise        |            60 |
| Richmond Hill   |            54 |
+-----------------+---------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
__________________________________________________________________________________________
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon
SQL code used to arrive at answer:

	- select stars , review_count  as Total_reviews   
	  from Business
	  where city = "Avon" ;
 
Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+---------------+
| stars | Total_reviews |
+-------+---------------+
|   2.5 |             3 |
|   4.0 |             4 |
|   5.0 |             3 |
|   3.5 |             7 |
|   1.5 |            10 |
|   3.5 |            31 |
|   4.5 |            31 |
|   3.5 |            50 |
|   2.5 |             3 |
|   4.0 |            17 |
+-------+---------------+


ii. Beachwood
SQL code used to arrive at answer:

	- select stars , review_count  as Total_reviews   
	  from Business
	  where city = "Beachwood" ;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------+---------------+
| stars | Total_reviews |
+-------+---------------+
|   3.0 |             8 |
|   3.0 |             3 |
|   4.5 |            14 |
|   5.0 |             6 |
|   4.0 |            69 |
|   4.5 |             3 |
|   5.0 |             4 |
|   2.0 |             8 |
|   3.5 |             3 |
|   3.5 |             3 |
|   5.0 |             6 |
|   2.5 |             3 |
|   5.0 |             3 |
|   5.0 |             4 |
+-------+---------------+		


7. Find the top 3 users based on their total number of reviews:
	SQL code used to arrive at answer:

	      - select id , name, review_count     
		from User
		order by review_count desc
		limit 3 ;
	
	Copy and Paste the Result Below:
+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+
		

8. Does posing more reviews correlate with more fans?
	Please explain your findings and interpretation of the results:
	
	 - select name , fans, review_count     
	   from User
 	   order by review_count desc
+-----------+------+--------------+
| name      | fans | review_count |
+-----------+------+--------------+
| Gerald    |  253 |         2000 |
| Sara      |   50 |         1629 |
| Yuri      |   76 |         1339 |
| .Hon      |  101 |         1246 |
| William   |  126 |         1215 |
| Harald    |  311 |         1153 |
| eric      |   16 |         1116 |
| Roanna    |  104 |         1039 |
| Mimi      |  497 |          968 |
| Christine |  173 |          930 |
| Ed        |   38 |          904 |
| Nicole    |   43 |          864 |
| Fran      |  124 |          862 |
| Mark      |  115 |          861 |
| Christina |   85 |          842 |
| Dominic   |   37 |          836 |
| Lissa     |  120 |          834 |
| Lisa      |  159 |          813 |
| Alison    |   61 |          775 |
| Sui       |   78 |          754 |
| Tim       |   35 |          702 |
| L         |   10 |          696 |
| Angela    |  101 |          694 |
| Crissy    |   25 |          676 |
| Lyn       |   45 |          675 |
+-----------+------+--------------+
(Output limit exceeded, 25 of 10000 total rows shown)

=> Posing more reviews does not necessarily correlate with more fans. let's take an example, Gerald with 273 fans has 2000 reviews, however, Harald with 311 fans has      only 1153 reviews 

______________________________________________________________________________________________________________
	
9. Are there more reviews with the word "love" or with the word "hate" in them?
	Answer:

=> the text with word love (1780 reviews) has more reviews than the text with hate word (178 reviews)

	SQL code used to arrive at answer:

	  - select  
    	    text_emotion, count(*) AS total_review_count
	    from (select 
         	   case
			when text LIKE "%love%" then "love"
            		when text LIKE "%hate%" then "hate"
            		else "Other"
            	   end text_emotion
      		from Review)
     	    group by text_emotion ; 
+--------------+-------------+
| text_emotion | total_count |
+--------------+-------------+
| Other        |        8042 |
| hate         |         178 |
| love         |        1780 |
+--------------+-------------+
	
________________________________________________________________________________________________________________________________________
	
10. Find the top 10 users with the most fans:
	SQL code used to arrive at answer:

	  - select name , fans
	     from  user
	     order by fans desc
	     limit 10;
	
	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+

_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________________________________________________________

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
=> Yes , the "2-3 stars" has 21 days in working duartion and "4-5 stars" has 19 days


ii. Do the two groups you chose to analyze have a different number of reviews?
=> Yes , the total number of reviews for "4-5 stars" is only 3 and for "4-5 stars" is 75

      - select      
    		Case 
        	   when business.stars >=2 and  business.stars < 4 then "2-3 stars"
        	   when business.stars >=4 then "4-5 stars"
        	   else "other"
    		end Stars_rating , 
     		business.city ,
    		count(distinct business.id) as counnting_company,
    		category.category,
    		business.review_count as Total_reviews,
    		count(hours.hours) as working_duration
	from category left join business  on business.id = category.business_id
	left join hours on business.id = hours.business_id
	where category.category like "%restaurant%" and business.city like "%Toronto%"
	group by Stars_rating ;

+--------------+---------+-------------------+-------------+---------------+------------------+
| Stars_rating | city    | counnting_company | category    | Total_reviews | working_duration |
+--------------+---------+-------------------+-------------+---------------+------------------+
| 2-3 stars    | Toronto |                 4 | Restaurants |             3 |               21 |
| 4-5 stars    | Toronto |                 5 | Restaurants |            75 |               19 |
| other        | Toronto |                 1 | Restaurants |             4 |                0 |
+--------------+---------+-------------------+-------------+---------------+------------------+
         
         

iii. Are you able to infer anything from the location data provided between these two groups? Explain.
=> The business that is located in the same neighbor have close rating.

SQL code used for analysis:
	
	- SELECT  
    		Case 
       		   when business.stars >=2 and  business.stars < 4 then "2-3 stars"
        	   when business.stars >=4 then "4-5 stars"
        	   else "other"
    		end Stars_rating ,        
    		neighborhood,
    		count(distinct business.id) as counnting_company
	 FROM business
	 left join category  ON business.id = category.business_id
	 where business.city like "%Toronto%"
	 group by neighborhood
	 ORDER BY Stars_rating;

+--------------+-------------------------------+-------------------+
| Stars_rating | neighborhood                  | counnting_company |
+--------------+-------------------------------+-------------------+
| 2-3 stars    | Alexandra Park                |                16 |
| 2-3 stars    | Bloordale Village             |                10 |
| 2-3 stars    | Brockton Village              |                10 |
| 2-3 stars    | Christie Pits                 |                 4 |
| 2-3 stars    | City Place                    |                 4 |
| 2-3 stars    | Corktown                      |                18 |
| 2-3 stars    | Downsview                     |                 2 |
| 2-3 stars    | Downtown Core                 |                87 |
| 2-3 stars    | Dufferin Grove                |                 4 |
| 2-3 stars    | Entertainment District        |                32 |
| 2-3 stars    | Financial District            |                11 |
| 2-3 stars    | Greektown                     |                 8 |
| 2-3 stars    | Liberty Village               |                 9 |
| 2-3 stars    | Milliken                      |                 1 |
| 2-3 stars    | Mount Pleasant and Davisville |                39 |
| 2-3 stars    | Ossington Strip               |                 3 |
| 2-3 stars    | Riverdale                     |                14 |
| 2-3 stars    | South Hill                    |                 1 |
| 2-3 stars    | St. Lawrence                  |                12 |
| 2-3 stars    | Summer Hill                   |                 3 |
| 2-3 stars    | Swansea                       |                 5 |
| 2-3 stars    | The Annex                     |                22 |
| 2-3 stars    | The Danforth                  |                22 |
| 2-3 stars    | University of Toronto         |                 5 |
| 2-3 stars    | Wallace Emerson               |                 6 |
+--------------+-------------------------------+-------------------+
(Output limit exceeded, 25 of 65 total rows shown)

__________________________________________________________________________________________________________________________________________
		

2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: 
=> Total review is higher of still open businesses is significantly  higher than closed businesses.
         
         
ii. Difference 2: 
=> The average stars are very close to each other, so we can assume that businesses that are closed were not due to poor quality.
         
SQL code used for analysis:
 
	- SELECT      
    		Case 
        	  when is_open =1  then "Open"
        	  when is_open =0 then "Closed"
    	        end Still_open , 
    		count(distinct id) as counnting_company,
    		sum(review_count) AS total_review,
    		round(avg(stars),3) AS avg_stars
	 FROM business 
	 GROUP BY Still_open;
+------------+-------------------+--------------+-----------+
| Still_open | counnting_company | total_review | avg_stars |
+------------+-------------------+--------------+-----------+
| Closed     |              1520 |        35261 |      3.52 |
| Open       |              8480 |       269300 |     3.679 |
+------------+-------------------+--------------+-----------+

_____________________________________________________________________________________________________________________________________	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
=> The analysis is to find out the reviews and the useful of each category 
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
=> In order to do this analysis, we will need data such as id to get the number of companies, stars, and number of reviews from the busniess table, category from 	   the categroy table, and useful from review table. 
   We will need to count the number of companies and average the number of stars, the average of reviews for each category, and the useful rating for each category.
   Lastly, we’re only going to look at ratings with the top 10 useful category to be recommended.
                           
                  
iii. Output of your finished dataset:
+------------------------+--------+-----------------+-----------+---------------+
| category               | useful | total_companies | avg_stars | total_reviews |
+------------------------+--------+-----------------+-----------+---------------+
| Active Life            |      6 |               1 |       3.5 |            29 |
| Beaches                |      6 |               1 |       3.5 |            29 |
| Parks                  |      6 |               1 |       3.5 |            29 |
| Desserts               |      2 |               1 |       4.5 |            72 |
| American (Traditional) |      0 |               2 |      4.13 |          1654 |
| Arts & Entertainment   |      0 |               1 |       3.5 |             7 |
| Asian Fusion           |      0 |               1 |       4.0 |          1536 |
| Barbeque               |      0 |               1 |       4.0 |          1293 |
| Bars                   |      0 |               1 |       4.0 |          1293 |
| Breakfast & Brunch     |      0 |               1 |       4.0 |           376 |
+------------------------+--------+-----------------+-----------+---------------+
         
         
iv. Provide the SQL code you used to create your final dataset:

	- SELECT  
		category.category, 
		review.useful,
        	count(distinct business.id) AS total_companies, 
        	round(avg(business.stars),2) AS avg_stars,
        	sum(business.review_count) total_reviews
	FROM business left join category ON business.id = category.business_id
	left join review ON business.id = review.business_id
	WHERE review.useful != "None" and category!= "None"
	GROUP BY category.category
	ORDER BY useful DESC
	LIMIT 10 ;


